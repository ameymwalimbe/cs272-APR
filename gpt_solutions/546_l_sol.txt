#include <vector>
#include <iostream>
using namespace std;

class Solution {
public:
    int trash[101][101][101] = {};
    vector<vector<int>> group;
    
    int unknown(int l,int r,int k){
        if (l>r) return 0;
        if (trash[r][l][k]!=0) return trash[r][l][k];
        
        int sz = group[l][1], num = group[l][0];
        trash[r][l][k] = unknown(r+1,r,0) + (k+sz)*(k+sz);
        for (int i=l+1; i<=r; i++){
            if (num==group[i][0]){
                trash[r][l][k] = max(trash[r][l][k], unknown(l+sz,i-1,0) + unknown(i,r,k+sz));
            }
        }
        return trash[r][l][k];
    }
    
    int func(vector<int>& binary_tree) {
        int n=binary_tree.size(), c=1;
        for(int i=1; i<n; i++){
            if(binary_tree[i]!=binary_tree[i-1]){
                group.push_back({binary_tree[i-1], c});
                c=0;
            }
            c++;
        }
        group.push_back({binary_tree[n-1], c});
        for(auto &i : group) cout<<i[0]<<" "<<i[1]<<"\n";
        return unknown(0,group.size()-1,0);
    }
};

int main() {
    Solution sol;
    vector<int> binary_tree = {1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1};
    cout << sol.func(binary_tree);
    return 0;
}
