#include <vector>
#include <string>
#include <queue>
#include <algorithm>

using namespace std;

class Solution {
public:
    bool able(string s, string t) {
        int c = 0;
        for (int i = 0; i < s.length(); i++)
            c += (s[i] != t[i]);
        return c == 1;
    }

    void bfs(vector<vector<int>>& g, vector<vector<int>>& parent, int n, int start, int end) {
        vector<int> dist(n, 1005);
        queue<int> q;
        parent[start].clear(); // Clear the parent list before starting
        parent[start].push_back(-1); // Start has no parent
        dist[start] = 0;
        q.push(start); // Push the starting node into the queue
        while (!q.empty()) {
            int x = q.front();
            q.pop(); // Remove the front element from the queue
            for (int u : g[x]) {
                if (dist[u] > dist[x] + 1) {
                    dist[u] = dist[x] + 1;
                    q.push(u);
                    parent[u].clear();
                    parent[u].push_back(x);
                }
                else if (dist[u] == dist[x] + 1)
                    parent[u].push_back(x);
            }
        }
    }

    void shortestPaths(vector<vector<int>>& Paths, vector<int>& path, vector<vector<int>>& parent, int node) {
        if (node == -1) {
            // as parent of start was -1, we've completed the backtrack
            Paths.push_back(path);
            return;
        }
        for (auto u : parent[node]) {
            path.push_back(u);
            shortestPaths(Paths, path, parent, u);
            path.pop_back();
        }
    }

    vector<vector<string>> findLadders(string beginWord, string endWord, vector<string>& wordList) {
        // start and end are indices of beginWord and endWord
        int n = wordList.size(), start = -1, end = -1;
        vector<vector<string>> ANS;
        for (int i = 0; i < n; i++) {
            if (wordList[i] == beginWord)
                start = i;
            if (wordList[i] == endWord)
                end = i;
        }

        // if endWord doesn't exist, return empty list
        if (end == -1)
            return ANS;

        // if beginWord doesn't exist, add it in start of WordList
        if (start == -1) {
            wordList.insert(wordList.begin(), beginWord);
            start = 0;
            end++;
            n++;
        }
        // for each word, we're making adjacency list of neighbour words (words that can be made with one letter change)
        // Paths will store all the shortest paths (formed later by backtracking)
        vector<vector<int>> g(n, vector<int>()), Paths;

        // storing possible parents for each word (to backtrack later), path is the current sequence (while backtracking)
        vector<vector<int>> parent(n, vector<int>());
        vector<int> path;

        // creating adjacency list for each pair of words in the wordList (including beginword)
        for (int i = 0; i < n - 1; i++)
            for (int j = i + 1; j < n; j++)
                if (able(wordList[i], wordList[j])) {
                    g[i].push_back(j);
                    g[j].push_back(i);
                }

        bfs(g, parent, n, start, end);

        // backtracking to make shortest paths
        shortestPaths(Paths, path, parent, end);
        for (auto u : Paths) {
            vector<string> now;
            for (int i = 0; i < u.size() - 1; i++)
                now.push_back(wordList[u[i]]);
            reverse(now.begin(), now.end());
            now.push_back(wordList[end]);
            ANS.push_back(now);
        }
        return ANS;
    }
};
