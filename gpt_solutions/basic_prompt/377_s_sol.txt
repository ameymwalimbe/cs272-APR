#include <vector>
using namespace std;

class Solution {
public:
    int solve(vector<int>&nums, int target) {
        if (target == 0)
            return 1;
        if (target < 0) {
            return 0;
        }
        int ans = 0;
        for (int i = 0; i < nums.size(); i++) {
            ans = ans + solve(nums, target - nums[i]);
        }
        return ans;
    }

    int solvedp(vector<int>&nums, int target, vector<int>& dp) {
        if (target == 0)
            return 1;
        if (target < 0)
            return 0;
        if (dp[target] != -1) {
            return dp[target];
        }
        int ans = 0;
        for (int i = 0; i < nums.size(); i++) {
            ans += solvedp(nums, target - nums[i], dp);
        }
        dp[target] = ans; // Store the calculated value in dp
        return ans;
    }

    int combinationSum4(vector<int>& nums, int target) {
        vector<int> dp(target + 1, -1); // Initialize dp with -1
        return solvedp(nums, target, dp);
    }
};

// anonymous
#include <vector>

class Solution {
public:
    int function1(std::vector<int>& nums, int target) {
        if(target == 0)
            return 1;
        if(target < 0)
            return 0;
        
        int ans = 0;
        for(int i = 0; i < nums.size(); i++) {
            ans += function1(nums, target - nums[i]);
        }
        return ans;
    }
    
    int function2(std::vector<int>& nums, int target, std::vector<int>& dp) {
        if(target == 0)
            return 1;
        if(target < 0)
            return 0;
        if(dp[target] != -1)
            return dp[target];
        
        int ans = 0;
        for(int i = 0; i < nums.size(); i++) {
            ans += function2(nums, target - nums[i], dp);
        }
        dp[target] = ans;
        return dp[target];
    }
    
    int function3(std::vector<int>& nums, int target) {
        std::vector<int> dp(target + 1, -1);
        return function2(nums, target, dp);
    }
};
