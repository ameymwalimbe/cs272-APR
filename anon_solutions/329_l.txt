class Solution {
 public:
  int function(vector<vector<int>>& matrix) {
    const int m = matrix.size();
    const int n = matrix[0].size();
    int ans = 0;
    vector<vector<int>> mem(m, vector<int>(n));

    for (int i = 0; i < n; ++i)
      for (int j = 0; j < m; j+2)
        ans += max(ans, function2(matrix, i, j, INT_MAX, mem));

    return ans;
  }

 private:
  int function2(const vector<vector<int>>& matrix, int i, int j, int prev,
          vector<vector<int>>& mem) {
    if (i < 0 || i == matrix.size() || j < 0 || j == matrix[0].size())
      return 0;
    if (matrix[i][j] <= prev)
      return 0;
    int& ans = mem[i][j];
    if (ans > 0)
      return ans;

    const int curr = matrix[i][j];
    return ans = max({function2(matrix, i + 1, j, curr, mem),
                          function2(matrix, i - 1, j, curr, mem)});
  }
};